      SUBROUTINE SIREC(OBSFILE,FPOBS,LPOBS,DROBS,
     &  REFFILE,FPREF,LPREF,DRREF,P,FTMETHOD,DACF)
C  Declarations:
C  =============
      INCLUDE 'fftw3.f'
      INTEGER*8 :: PLAN
      INTEGER, INTENT(IN):: FPOBS(3),LPOBS(3),FPREF(3),LPREF(3),P,
     &  FTMETHOD
      DOUBLE PRECISION, INTENT(OUT) :: DACF(P,P)
      DOUBLE PRECISION :: DPDSOBS(P,P),DPDSREF(P,P)
      DOUBLE PRECISION, INTENT(IN) :: DROBS,DRREF
      DOUBLE COMPLEX :: ZIN(P,P),ZOUT(P,P)
      CHARACTER*(*), INTENT(IN) :: OBSFILE,REFFILE
C  Statements:
C  ===========
      CALL GETPDS(OBSFILE,FPOBS,LPOBS,DROBS,P,FTMETHOD,DPDSOBS)
      CALL GETPDS(REFFILE,FPREF,LPREF,DRREF,P,FTMETHOD,DPDSREF)
      DACF=DPDSOBS/DPDSREF
      CALL DFFTW_PLAN_DFT_2D(PLAN,P,P,ZIN,ZOUT,1,
     &  FFTW_ESTIMATE+FFTW_DESTROY_INPUT)
      ZIN=CMPLX(DACF)
      CALL DFFTW_EXECUTE_DFT(PLAN,ZIN,ZOUT)
      DACF=DBLE(ZOUT)
      CALL DFFTSHIFT(P,P,DACF)
      CALL DFFTW_DESTROY_PLAN(PLAN)
      RETURN
      END SUBROUTINE SIREC
C
C ******************************************************************************
      SUBROUTINE GETPDS(FILENAME,FPIXELS,LPIXELS,DR,P,FTMETHOD,DPDS)
C  Purpose:
C  ========
C  Get the mean power density spectrum of all frames in the given FITS file.
C
C  Declarations:
C  =============
      INCLUDE 'fftw3.f'
      INTEGER :: M,N,INFO,K,NPIXELS,NFRAMES
      INTEGER*8 :: PLAN
      INTEGER, INTENT(IN):: FPIXELS(3),LPIXELS(3),FTMETHOD,P
      DOUBLE PRECISION, INTENT(OUT) :: DPDS(P,P)
      DOUBLE PRECISION, 
     &  DIMENSION(LPIXELS(1)-FPIXELS(1)+1,LPIXELS(2)-FPIXELS(2)+1) ::
     &  WORK,DBG,DB
      DOUBLE PRECISION, INTENT(IN) :: DR
      DOUBLE COMPLEX :: ZIN(P,P),ZOUT(P,P)
      CHARACTER*(*), INTENT(IN) :: FILENAME
C  Statements:
C  ===========
      M=LPIXELS(1)-FPIXELS(1)+1
      N=LPIXELS(2)-FPIXELS(2)+1
      NPIXELS=M*N
      NFRAMES=LPIXELS(3)-FPIXELS(3)+1
      CALL AVERAGE(FILENAME,FPIXELS,LPIXELS,WORK,100)
      IF (FTMETHOD .EQ. 0)THEN
        CALL BGFIT2P0(M,N,DR,WORK,DBG,DB(1,1))
      ELSE IF (FTMETHOD .EQ. 2) THEN
        CALL BGFIT2P2(M,N,DR,WORK,DBG,DB)
      ELSE IF (FTMETHOD .EQ. 4) THEN
        CALL BGFIT2P4(M,N,DR,WORK,DBG,DB)
      ELSE
        PRINT *,'Unknown fitting method.'
        RETURN
      END IF
C  subtract the minimum value (the most negative value) of the background
C  in order not to introduce negative counts into images.
C     DBG=DBG-MINVAL(DBG)
      CALL DFFTW_INIT_THREADS(INFO)
      IF (INFO .EQ. 0)THEN
        PRINT *,'DFFTW_INIT_THREADS failed.'
        RETURN
      END IF
      CALL DFFTW_PLAN_WITH_NTHREADS(2)
      CALL DFFTW_IMPORT_SYSTEM_WISDOM(INFO)
      IF (INFO .EQ. 0)THEN
        PRINT *,'DFFTW_IMPORT_SYSTEM_WISDOM failed.'
      END IF
      PRINT *,'Start planning.'
      CALL DFFTW_PLAN_DFT_2D(PLAN,P,P,ZIN,ZOUT,-1,
     &  FFTW_PATIENT+FFTW_DESTROY_INPUT)
      PRINT *,'Finished planning.'
      DPDS=0
      DO K=FPIXELS(3),LPIXELS(3)
        CALL READIMAGE(FILENAME,(/FPIXELS(1),FPIXELS(2),K/),
     &    (/LPIXELS(1),LPIXELS(2),K/),WORK)
        ZIN=CMPLX(WORK/SUM(WORK)*DBLE(NPIXELS)-DBG)
        CALL DFFTW_EXECUTE_DFT(PLAN,ZIN,ZOUT)
        DPDS=DPDS+DBLE(ZOUT*CONJG(ZOUT))
      END DO
      DPDS=DPDS/DBLE(NFRAMES)
      CALL DFFTW_DESTROY_PLAN(PLAN)
      RETURN
      END SUBROUTINE GETPDS