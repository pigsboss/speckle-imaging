      PROGRAM RFFM
C  Retrieve phase from modulus.
      IMPLICIT NONE
      INTEGER :: NARGS,NAXES(3),K,STATUS
      DOUBLE PRECISION :: DGAIN
      DOUBLE PRECISION,PARAMETER :: DEFAULTDGAIN=0.2D0
      DOUBLE PRECISION,ALLOCATABLE :: DPHI(:,:),DRHO(:,:),DIMG(:,:)
      DOUBLE COMPLEX,ALLOCATABLE :: ZSPE(:,:)
      CHARACTER(LEN=256) :: ARG,PHAFILE,MODFILE,PREFIX,BASENAME,EXTNAME
      INTERFACE
      SUBROUTINE SPECTRUMTOIMAGE(NX,NY,ZSP,DIMG)
      INTEGER, INTENT(IN) :: NX,NY
      DOUBLE PRECISION, INTENT(OUT) :: DIMG(NX,NY)
      DOUBLE COMPLEX, INTENT(IN) :: ZSP(NX,NY)
      END SUBROUTINE SPECTRUMTOIMAGE
      SUBROUTINE RETRIEVEPHASEFROMMODULUS(NX,NY,DRHO,DPHI,DGAIN)
      INTEGER,INTENT(IN) :: NX,NY
      DOUBLE PRECISION,INTENT(IN) :: DRHO(NX,NY),DGAIN
      DOUBLE PRECISION,INTENT(INOUT) :: DPHI(NX,NY)
      END SUBROUTINE
      SUBROUTINE IMAGESIZE(IMGFILE,NAXES)
      CHARACTER*(*), INTENT(IN) :: IMGFILE
      INTEGER, INTENT(OUT) :: NAXES(3)
      END SUBROUTINE IMAGESIZE
      SUBROUTINE RESOLVEPATH(PATH,BASENAME,EXTNAME)
      CHARACTER*(*), INTENT(IN) :: PATH
      CHARACTER*(*), INTENT(OUT) :: BASENAME,EXTNAME
      END SUBROUTINE RESOLVEPATH
      SUBROUTINE DFFTSHIFT(NX,NY,DIMG)
      INTEGER, INTENT(IN) :: NX,NY
      DOUBLE PRECISION, INTENT(INOUT) :: DIMG(NX,NY)
      END SUBROUTINE DFFTSHIFT
      SUBROUTINE DIFFTSHIFT(NX,NY,DIMG)
      INTEGER, INTENT(IN) :: NX,NY
      DOUBLE PRECISION, INTENT(INOUT) :: DIMG(NX,NY)
      END SUBROUTINE DIFFTSHIFT
      SUBROUTINE ZFFTSHIFT(NX,NY,ZSP)
      INTEGER, INTENT(IN) :: NX,NY
      DOUBLE COMPLEX, INTENT(INOUT) :: ZSP(NX,NY)
      END SUBROUTINE ZFFTSHIFT
      SUBROUTINE ZIFFTSHIFT(NX,NY,ZSP)
      INTEGER, INTENT(IN) :: NX,NY
      DOUBLE COMPLEX, INTENT(INOUT) :: ZSP(NX,NY)
      END SUBROUTINE ZIFFTSHIFT
      SUBROUTINE READIMAGE(FILENAME,FPIXELS,LPIXELS,DIMG)
      INTEGER, INTENT(IN) :: FPIXELS(3),LPIXELS(3)
      DOUBLE PRECISION, INTENT(OUT) :: DIMG(*)
      CHARACTER(LEN=*), INTENT(IN) :: FILENAME
      END SUBROUTINE READIMAGE
      SUBROUTINE WRITEIMAGE(FILENAME,FPIXELS,LPIXELS,DIMG)
      INTEGER, INTENT(IN) :: FPIXELS(3),LPIXELS(3)
      DOUBLE PRECISION, INTENT(IN) :: DIMG(*)
      CHARACTER(LEN=*), INTENT(IN) :: FILENAME
      END SUBROUTINE WRITEIMAGE
      END INTERFACE
C
      STATUS=0
      NARGS=COMMAND_ARGUMENT_COUNT()
      CALL GET_COMMAND_ARGUMENT(1,ARG)
      IF(INDEX(ARG,'-help') .GT. 0)THEN
        PRINT *,'Usage:'
        PRINT *,'======'
        PRINT *,'Retrieve phase from modulus.'
        PRINT *,'rffm filename_modulus -phase=filename'
        PRINT *,'  [-prefix=...] [-gain=...]'
        STOP
      END IF
C
      CALL GET_COMMAND_ARGUMENT(1,MODFILE)
      CALL RESOLVEPATH(MODFILE,BASENAME,EXTNAME)
      PREFIX=TRIM(BASENAME)//'_prm'
      DGAIN=DEFAULTDGAIN
      PHAFILE=''
      DO K=2,NARGS
        CALL GET_COMMAND_ARGUMENT(K,ARG)
        IF(INDEX(ARG,'-phase=').GT.0)THEN
          PHAFILE=ARG(INDEX(ARG,'-phase=')+7:)
        ELSE IF(INDEX(ARG,'-prefix=').GT.0)THEN
          PREFIX=ARG(INDEX(ARG,'-prefix=')+8:)
        ELSE IF(INDEX(ARG,'-gain=').GT.0)THEN
          READ(ARG(INDEX(ARG,'-prefix=')+8:),*) DGAIN
        ELSE
          PRINT *,'Unknown argument '//TRIM(ARG)
          RETURN
        END IF
      END DO
C
      IF(LEN_TRIM(PHAFILE) .LE. 0)THEN
        PRINT *,'error: initial estimate of phase must be specified.'
        STOP
      END IF
C
      WRITE(*,*)'initial phase: '//TRIM(PHAFILE)
      WRITE(*,*)'modulus: '//TRIM(MODFILE)
      WRITE(*,*)'prefix of output filename: '//TRIM(PREFIX)
      WRITE(*,'(A,ES8.2)')' gain factor: ',DGAIN
      CALL IMAGESIZE(MODFILE,NAXES)
      WRITE(*,'(A,I3,A,I3)')' image size (width x height): ',
     &  NAXES(1),' x ',NAXES(2)
C
      ALLOCATE(DRHO(NAXES(1),NAXES(2)),STAT=STATUS)
      IF(STATUS.NE.0)THEN
        WRITE(*,*)'error: out of memory.'
        STOP
      END IF
      ALLOCATE(DPHI(NAXES(1),NAXES(2)),STAT=STATUS)
      IF(STATUS.NE.0)THEN
        WRITE(*,*)'error: out of memory.'
        STOP
      END IF
      ALLOCATE(DIMG(NAXES(1),NAXES(2)),STAT=STATUS)
      IF(STATUS.NE.0)THEN
        WRITE(*,*)'error: out of memory.'
        STOP
      END IF
      ALLOCATE(ZSPE(NAXES(1),NAXES(2)),STAT=STATUS)
      IF(STATUS.NE.0)THEN
        WRITE(*,*)'error: out of memory.'
        STOP
      END IF
C
      CALL READIMAGE(MODFILE,(/1,1,1/),(/NAXES(1),NAXES(2),1/),DRHO)
      CALL DIFFTSHIFT(NAXES(1),NAXES(2),DRHO)
      CALL READIMAGE(PHAFILE,(/1,1,1/),(/NAXES(1),NAXES(2),1/),DPHI)
      CALL RETRIEVEPHASEFROMMODULUS(NAXES(1),NAXES(2),DRHO,DPHI,DGAIN)
      ZSPE=DCMPLX(DRHO)*DCMPLX(DCOS(DPHI),DSIN(DPHI))
      CALL SPECTRUMTOIMAGE(NAXES(1),NAXES(2),ZSPE,DIMG)
      CALL WRITEIMAGE(TRIM(PREFIX)//'_pha.fits',(/1,1,1/),
     &  (/NAXES(1),NAXES(2),1/),DPHI)
      WRITE(*,*)'retrieved phase: '//TRIM(PREFIX)//'_pha.fits'
      CALL WRITEIMAGE(TRIM(PREFIX)//'_img.fits',(/1,1,1/),
     &  (/NAXES(1),NAXES(2),1/),DIMG)
      WRITE(*,*)'improved image: '//TRIM(PREFIX)//'_img.fits'
C
      DEALLOCATE(DRHO)
      DEALLOCATE(DPHI)
      DEALLOCATE(DIMG)
      DEALLOCATE(ZSPE)
      STOP
      END PROGRAM RFFM
